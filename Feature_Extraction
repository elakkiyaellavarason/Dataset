import math
from datetime import datetime
import pandas as pd
import numpy as np
from matplotlib.pyplot import *
import numpy.linalg as la
import datetime as dt
import csv
from datetime import datetime
from scipy.interpolate import *
from numpy import *

import vector
from sklearn.preprocessing import MinMaxScaler


class Feature_Extraction:

    def Start_X(dataframe):
        Start_X_Value=dataframe.iat[0,4]
        print("Start_X_Value",Start_X_Value)
        return Start_X_Value

    def End_X(dataframe):
        End_X_Value = dataframe.iat[-1, 4]
        return End_X_Value

    def Start_Y(dataframe):
        Start_Y_Value = dataframe.iat[0,5]
        return Start_Y_Value

    def End_Y(dataframe):
        End_Y_Value = dataframe.iat[-1, 5]
        return End_Y_Value

    def Total_Time(dataframe):
        Total_Time_Taken= (((dataframe.iat[-1, 3]) - (dataframe.iat[0, 3])).total_seconds() * 1000)
        return Total_Time_Taken

    def Total_Distance(dataframe):
        Total_Distance = (dataframe.iat[-1, 3]) - (dataframe.iat[0, 3])
        Total_Distance = (dataframe.iat[-1, 3]) - (dataframe.iat[0, 3])
        return Total_Distance

    def Finger_Pressure_Down(dataframe):
        Pressure_Down = dataframe.iat[0,9]
        return Pressure_Down

    def Finger_Pressure_Up(dataframe):
        Pressure_Up = dataframe.iat[-1,9]
        return Pressure_Up

    def Finger_Size_Down(dataframe):
        Finger_Size_Down = dataframe.iat[0, 10]
        return Finger_Size_Down

    def Finger_Size_Up(dataframe):
        Finger_Size_Up = dataframe.iat[-1, 10]
        return Finger_Size_Up

    def Orientation(dataframe):
        Orientation=dataframe.iat[-1, 8]
        return Orientation

    def Delta_X(dataframe):
        Delta_x = (dataframe.iat[0,4]) - (dataframe.iat[1,4])
        return Delta_x



    def Delta_Y(dataframe):
        Delta_y = (dataframe.iat[0,5]) - (dataframe.iat[1,5])
        return Delta_y

    def Average_Finger_Size(dataframe):
        Average_Size = dataframe[' Finger Size'].mean()
        av=round(Average_Size, 6)
        return av

    def Average_Finger_Pressure(dataframe):
        Average_Pressure = dataframe[' Pressure '].mean()
        Rounded_Average_Pressure = round(Average_Pressure, 6)
        return Rounded_Average_Pressure

    def Mid_Action_Pressure(dataframe):
        mid_position=int(len(dataframe)/2)
        mid_action_pressure = dataframe.iat[mid_position, 9]
        return mid_action_pressure

    def Width(dataframe):
        Start_x_value = dataframe.iat[-1, 4]
        End_x_value= dataframe.iat[0, 4]
        Start_y_value = dataframe.iat[-1, 5]
        End_y_value = dataframe.iat[0, 5]
        Absolute_x=Start_x_value - End_x_value
        Absolute_y=Start_y_value - End_y_value
        Euclidean_Distance=math.hypot(Absolute_x, Absolute_y)
        return Euclidean_Distance

    def Max_X(dataframe):
        print('Max_x')
        Max_x = dataframe[' X '].max()
        return Max_x

    def Max_Y(dataframe):
        Max_y = dataframe[' Y '].max()
        return Max_y

    def Min_X(dataframe):
        print('Max_x')
        Min_x = dataframe[' X '].min()
        return Min_x

    def Min_Y(dataframe):
        Min_y = dataframe[' Y '].min()
        return Min_y

    def Stroke_Area_Outer(dataframe):
        Stroke_Area_Outer= (Max_x - Min_x)  * (Max_y - Min_y)
        return Stroke_Area_Outer

    def Stroke_Height(dataframe):
        Stroke_Height =0

        X_Values = dataframe[' X ']
        Y_Values = dataframe[' Y ']

        print('x_values',X_Values)
        print('y_values',Y_Values)

        '''
        coefficients = np.polyfit(X_Values, Y_Values, 1)
        polynomial = np.poly1d(coefficients)
        ys = polynomial(X_Values)
        print(coefficients)
        print(polynomial) '''

        p1 = polyfit(X_Values, Y_Values, 1);
#        p2 = polyfit(X_Values, Y_Values, 2);
     #   p3 = polyfit(X_Values, Y_Values, 3);
      #  v = polyval(p1, X_Values);
        print('poly values: ', p1)
       # plt.axhline(y=coefficients[1])
       # plt.show()
       # plot(X_Values,Y_Values,'o')
       # plot(X_Values,polyval(p1,X_Values),'r--')
       # plot(X_Values, polyval(p2, X_Values), 'y-')
       # plot(X_Values, polyval(p3, X_Values), 'g')

        angle = np.arctan(p1[0])
        print('Theta:', angle)

        theta = np.radians(angle)
        c, s = np.cos(theta), np.sin(theta)
        R = np.array(((c, -s), (s, c)))


        New_values=R.dot([X_Values, Y_Values])
        Stroke_Height = (New_values[1].max() - New_values[1].min())
        print('Rotation Matrix :::: ', Stroke_Height)

        '''
        theta0 = math.atan(p(1));
        theta = -theta0;

        # computation of rotation matrix.rotation is about X axis
        rot = [cos(theta) - sin(theta), sin(theta) cos(theta)]
        Xrot = rot * X - poly(2) * cos(theta0)
        % plot
        plot(X(1,:), X(2,:), Xrot(1,:), Xrot(2,:))
        '''
        return Stroke_Height

    def Slope(dataframe):
        if  (((dataframe.iat[0,4]) - (dataframe.iat[1,4])) != 0):
            slope = ((dataframe.iat[0,5]) - (dataframe.iat[1,5])) / ((dataframe.iat[0,4]) - (dataframe.iat[1,4]))
        else:
            slope=0
        return slope

    def Inking_Distance(df_segment):

        # Euclidean_Distance_between_points
        Start_x_value = df_segment.iat[-1, 4]
        End_x_value = df_segment.iat[0, 4]
        Start_y_value = df_segment.iat[-1, 5]
        End_y_value = df_segment.iat[0, 5]
        Absolute_x = Start_x_value - End_x_value
        Absolute_y = Start_y_value - End_y_value
        Euclidean_Distance = math.hypot(Absolute_x, Absolute_y)
        print(' Distance', round(Euclidean_Distance, 2))

        return Euclidean_Distance

    def Velocity(df_segment):

        velocity = 0
        #Speed = Distance / Time

        #Calculating Total time from point A to point B
        Total_Time_Taken = ((df_segment.iat[-1, 3]) - (df_segment.iat[0, 3]))
        print(' Total time taken:', Total_Time_Taken.total_seconds())

        #Euclidean_Distance_between_points
        Start_x_value = df_segment.iat[-1, 4]
        End_x_value = df_segment.iat[0, 4]
        Start_y_value = df_segment.iat[-1, 5]
        End_y_value = df_segment.iat[0, 5]
        Absolute_x = Start_x_value - End_x_value
        Absolute_y = Start_y_value - End_y_value
        Euclidean_Distance = math.hypot(Absolute_x, Absolute_y)
        print(' Distance', round(Euclidean_Distance,2))

        if ( Total_Time_Taken != 0 or Euclidean_Distance != 0):
            velocity = float(Euclidean_Distance / (Total_Time_Taken.total_seconds()*1000))
            if (velocity!=0):
                print('Velocity:', round(velocity, 3))

        return velocity


    def Acceleration(df_segment):
        acceleration = 0
        print('column names:::::::::', df_segment.columns.tolist())
        print(df_segment)
        Delta_Time=df_segment.iat[-1,11]
        print('Delta_Time:::::',Delta_Time)

        print('velocity 1:',(df_segment.iat[-1,12]))
        print('velocity 2:', (df_segment.iat[0, 12]))
        Delta_Velcoity = ((df_segment.iat[-1,12]) - (df_segment.iat[0, 12]))
        print(' Velocity:', Delta_Velcoity)
        
        if (Delta_Time!=0):

            acceleration = Delta_Velcoity/Delta_Time
        else:
            acceleration=0

        return acceleration



    def py_ang( v1 , v2):
            """ Returns the angle in radians between vectors 'v1' and 'v2'    """
            v1 = np.array([2, 0])
            v2 = np.array([4, 1])

            cosang = np.dot(v1, v2)
            print('cosangle:', cosang)

            sinang = la.norm(np.cross(v1, v2))
            print('sin:', sinang)

            print('Angle: ', np.arctan2(sinang, cosang))

            return np.arctan2(sinang, cosang)

    def angle(v1, v2, acute):
        # v1 is your firsr vector
        # v2 is your second vector
        angle = np.arccos(np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2)))
        if (acute == True):
            return angle
        else:
            return 2 * np.pi - angle

    def angle_between(p1, p2):
        ang1 = np.arctan2(*p1[::-1])
        ang2 = np.arctan2(*p2[::-1])
        return np.rad2deg((ang1 - ang2) % (2 * np.pi))

#slicing rows
df = pd.read_csv('C:\\Users\\ee244\\Desktop\\Data Collection\\Data\\user106\\session 2\\Touch_new.csv', parse_dates=[2])

df.columns=['Page','Subject_ID',' Touch_Action ',' Timestamp ',' X ',' Y ' ,'Pointer_ID','Tool_type','Orientation',' Pressure ',' Finger Size']
#Total columns and rows
print(df.shape)
#finding null values
print(df.isnull().sum())

#findding NaN values
print(df.isna().sum())

#Dropping the row when any value in timestamp is missing
df.dropna(subset=[' Timestamp '], how='any').shape

#Timestamp Conversion
df[' Timestamp '] = pd.to_datetime(df[' Timestamp '], format=' %y/%m/%d %H:%M:%S:%f ')


#Separating Horizontal strokes
''' 
df_horizontal = df[(df['Page'] == 'S1_S1_Horizontal_Swipe_Activity_1 ') | (df['Page'] == 'S1_S1_Horizontal_Swipe_Activity_2 ') | (df['Page'] == 'S1_S1_Horizontal_Swipe_Activity_3 ') | (df['Page'] == 'S1_S1_Horizontal_Swipe_Activity_4 ') | (df['Page'] == 'S1_S1_Horizontal_Swipe_Activity_5 ') | (df['Page'] == 'S1_S1_Horizontal_Swipe_Activity_6 ')  |
                   (df['Page'] == 'S1_S2_Horizontal_Swipe_Activity_1 ') | (df['Page'] == 'S1_S2_Horizontal_Swipe_Activity_2 ') | (df['Page'] == 'S1_S2_Horizontal_Swipe_Activity_3 ') | (df['Page'] == 'S1_S2_Horizontal_Swipe_Activity_4 ') | (df['Page'] == 'S1_S2_Horizontal_Swipe_Activity_5 ')  |
                   (df['Page'] == 'S1_S3_Horizontal_Swipe_Activity_1 ') | (df['Page'] == 'S1_S3_Horizontal_Swipe_Activity_2 ') | (df['Page'] == 'S1_S3_Horizontal_Swipe_Activity_3 ') | (df['Page'] == 'S1_S3_Horizontal_Swipe_Activity_4 ')  ]

 
df_horizontal_session_2 = df[(df['Page'] == 'S2_S1_Horizontal_Swipe_Activity_1 ') | (df['Page'] == 'S2_S1_Horizontal_Swipe_Activity_2 ') | (df['Page'] == 'S2_S1_Horizontal_Swipe_Activity_3 ') | (df['Page'] == 'S2_S1_Horizontal_Swipe_Activity_4 ') | (df['Page'] == 'S2_S1_Horizontal_Swipe_Activity_5 ') | (df['Page'] == 'S2_S1_Horizontal_Swipe_Activity_6 ')  |
                   (df['Page'] == 'S2_S2_Horizontal_Swipe_Activity_1 ') | (df['Page'] == 'S2_S2_Horizontal_Swipe_Activity_2 ') | (df['Page'] == 'S2_S2_Horizontal_Swipe_Activity_3 ') | (df['Page'] == 'S2_S2_Horizontal_Swipe_Activity_4 ') | (df['Page'] == 'S2_S2_Horizontal_Swipe_Activity_5 ')  |
                   (df['Page'] == 'Session2_Scenario_3_Horizontal_Swipe_Activity_1 ') | (df['Page'] == 'Session2_Scenario_3_Horizontal_Swipe_Activity_2 ') | (df['Page'] == 'Session2_Scenario_3_Horizontal_Swipe_Activity_3 ') | (df['Page'] == 'Session2_Scenario_3_Horizontal_Swipe_Activity_4 ')  ]


  
#Separating Vertical Strokes
df_Vertical =  df[(df['Page'] == 'S1_S1_Vertical_Scroll_1 ') | (df['Page'] == 'S1_S1_Vertical_Scroll_2 ') | (df['Page'] == 'S1_S1_Vertical_Scroll_3 ') | (df['Page'] == 'S1_S1_Vertical_Scroll_4 ') | (df['Page'] == 'S1_S1_Vertical_Scroll_5 ') | (df['Page'] == 'S1_S1_Vertical_Scroll_6 ')|
                  (df['Page'] == 'S1_S2_Vertical_1 ') | (df['Page'] == 'S1_S2_Vertical_2 ') | (df['Page'] == 'S1_S2_Vertical_3 ') | (df['Page'] == 'S1_S2_Vertical_4 ') |
                  (df['Page'] == 'Scenario_3_VerticalSwipe_Activity_1 ') | (df['Page'] == 'Scenario_3_VerticalSwipe_Activity_2 ') | (df['Page'] == 'Scenario_3_VerticalSwipe_Activity_3 ') | (df['Page'] == 'Scenario_3_VerticalSwipe_Activity_4 ') ]
'''



#Separating Vertical Strokes
df_Vertical_session_2 =  df[(df['Page'] == 'S2_S1_Vertical_Scroll_1 ') | (df['Page'] == 'S2_S1_Vertical_Scroll_2 ') | (df['Page'] == 'S2_S1_Vertical_Scroll_3 ') | (df['Page'] == 'S2_S1_Vertical_Scroll_4 ') | (df['Page'] == 'S2_S1_Vertical_Scroll_5 ') | (df['Page'] == 'S2_S1_Vertical_Scroll_6 ')|
                  (df['Page'] == 'S2_S2_VerticalSwipe_Activity_1 ') | (df['Page'] == 'S2_S2_VerticalSwipe_Activity_2 ') | (df['Page'] == 'S2_S2_VerticalSwipe_Activity_3 ') | (df['Page'] == 'S2_S2_VerticalSwipe_Activity_4 ') |
                  (df['Page'] == 'Scenario_3_VerticalSwipe_Activity_1 ') | (df['Page'] == 'Scenario_3_VerticalSwipe_Activity_2 ') | (df['Page'] == 'Scenario_3_VerticalSwipe_Activity_3 ') | (df['Page'] == 'Scenario_3_VerticalSwipe_Activity_4 ') ]

ActionDown_DF = df_Vertical_session_2.loc[df[' Touch_Action '] == " ACTION_DOWN "].index.values
ActionUp_DF = df_Vertical_session_2.loc[df[' Touch_Action '] == " ACTION_UP "].index.values


print("ActionDown_DF",ActionDown_DF)
print("ActionUp_DF",ActionUp_DF)



#Global Features
count = 0

while (count <= len(ActionUp_DF)):

    if (count != len(ActionUp_DF) ):


       df_segment = df.iloc[ActionDown_DF[count]:ActionUp_DF[count] + 1, 0:11]

       Number_of_data_points = (ActionUp_DF[count] - ActionDown_DF[count]) + 1

       #Start_X
       Start_X = Feature_Extraction.Start_X(df_segment)
       print("Start_X:" , Start_X)

       #Start_Y
       Start_Y = Feature_Extraction.Start_Y(df_segment)
       print("Start_Y:", Start_Y)

       #End_X
       End_X = Feature_Extraction.End_X(df_segment)
       print("End_X:", End_X)

       #End_Y
       End_Y = Feature_Extraction.End_Y(df_segment)
       print("End_Y:", End_Y)

       #Total Time Taken
       Total_Stroke_Time = Feature_Extraction.Total_Time(df_segment)
       print("Total Time Taken:",Total_Stroke_Time)

       # Total Distance
      # Total_Distance = Feature_Extraction.Total_Distance(df_segment)
      # print("Total Distance:", Total_Distance)

       #Delta X
       #Delta_X = Feature_Extraction.Delta_X(df_segment)
       #print("Delta X", Delta_X)

       # Finger pressure down
       Finger_Pressure_Down = Feature_Extraction.Finger_Pressure_Down(df_segment)
       print("Finger Pressure Down:", Finger_Pressure_Down)

       # Finger pressure up
       Finger_Pressure_Up = Feature_Extraction.Finger_Pressure_Up(df_segment)
       print("Finger Pressure Up:", Finger_Pressure_Up)

       # Finger size down
       Finger_Size_Down = Feature_Extraction.Finger_Size_Down(df_segment)
       print("Finger Size Down:", Finger_Size_Down)

       # Finger size up
       Finger_Size_Up = Feature_Extraction.Finger_Size_Up(df_segment)
       print("Finger Size Up:", Finger_Size_Up)

       # Average_Finger_Size
       Average_Finger_Size= Feature_Extraction.Average_Finger_Size(df_segment)
       print("Average Finger Size:", Average_Finger_Size)

       # Finger Pressure
       Average_Finger_Pressure = Feature_Extraction.Average_Finger_Pressure(df_segment)
       print("Average Finger Pressure:", Average_Finger_Pressure)

       # Stroke Width
       Stroke_Width = Feature_Extraction.Width(df_segment)
       print("Stroke_Width: ", Stroke_Width)

        #Max X
       Max_x = Feature_Extraction.Max_X(df_segment)
       print("Max x: ", Max_x)

       # Max Y
       Max_y: object = Feature_Extraction.Max_Y(df_segment)
       print("Max Y: ", Max_y)

       Min_x = Feature_Extraction.Min_X(df_segment)

       Stroke_Height = Feature_Extraction.Stroke_Height(df_segment)

       # Max Y
       Min_y: object = Feature_Extraction.Min_Y(df_segment)


       Stroke_Area_Outer = Feature_Extraction.Stroke_Area_Outer(df_segment)
       print("Stroke_Area_Outer : ", Stroke_Area_Outer)

       Slope = Feature_Extraction.Slope(df_segment)
       print("Slope : ", Slope)

       Mid_Action_Pressure = Feature_Extraction.Mid_Action_Pressure(df_segment)
       print(" Mid_Action_Pressure : ", Mid_Action_Pressure)

       # angle=Feature_Extraction.py_ang(1,2)
       # Attack Angle
       v1 = np.array([(df_segment.iat[1, 4]), (df_segment.iat[1, 5])])
       v2 = np.array([(df_segment.iat[0, 4]), (df_segment.iat[0, 5])])
       attackangle = Feature_Extraction.angle_between(v1, v2)

       # Leaving Angle
       vector_thirdlast = np.array([(df_segment.iat[(len(df_segment)-3), 4]), (df_segment.iat[(len(df_segment)-3), 5])])
       vector_secondlast = np.array([(df_segment.iat[(len(df_segment)-2), 4]), (df_segment.iat[(len(df_segment)-2), 5])])

       print('vector_last', vector_thirdlast)
       print('vector_first', vector_secondlast)

       leavingangle = Feature_Extraction.angle_between(vector_thirdlast,vector_secondlast)
       #leavingangle_final = 360 - leavingangle



       #Point to Point Features
       innercount = 0
       df_segment.at[(ActionDown_DF[count]), 'Delta_Time'] = 0
       df_segment.at[(ActionDown_DF[count]), 'Velocity'] = 0

       while innercount < (len(df_segment) - 1):
           df_segment_inner = df_segment.iloc[innercount:innercount + 2, :]

           df.at[(ActionDown_DF[count] + innercount), 'Position'] = innercount
           df_segment.at[(ActionDown_DF[count] + innercount) , 'Position'] = innercount


           #Delta_X
           Delta_X = Feature_Extraction.Delta_X(df_segment_inner)
           #df.at[0, 'Delta_X'] = 0
           df.at[(ActionDown_DF[count]),'Delta_X'] = 0
           df.at[(ActionDown_DF[count]+ innercount)+1, 'Delta_X'] =  Delta_X

           # Delta_Y
           Delta_Y = Feature_Extraction.Delta_Y(df_segment_inner)
           df.at[(ActionDown_DF[count]), 'Delta_Y'] = 0
           df.at[(ActionDown_DF[count] + innercount)+1, 'Delta_Y'] = Delta_Y

           # Calculating Total time from point A to point B
           Total_Time_Taken = (((df_segment_inner.iat[-1, 3]) - (df_segment_inner.iat[0, 3])).total_seconds() * 1000)
           df.at[(ActionDown_DF[count]), 'Delta_Time'] = 0
           df.at[ActionDown_DF[count] + innercount + 1, 'Delta_Time'] = Total_Time_Taken
           df_segment.at[ActionDown_DF[count] + innercount + 1, 'Delta_Time'] = Total_Time_Taken

           #Calculating Slope
           Slope = Feature_Extraction.Slope(df_segment_inner)
           df.at[(ActionDown_DF[count]), 'Slope'] = 0
           df.at[ActionDown_DF[count] + innercount +1, 'Slope'] = round(Slope, 2)

           #Velocity
           try:
               Velocity = Feature_Extraction.Velocity(df_segment_inner)
           except ZeroDivisionError:
               Velocity = 0
           df.at[(ActionDown_DF[count]), 'Velocity'] = 0
           df.at[ActionDown_DF[count] + innercount +1, 'Velocity'] = round(Velocity, 3)
           df_segment.at[ActionDown_DF[count] + innercount +1, 'Velocity'] = round(Velocity, 3)

           # Acceleration
           Acceleration = Feature_Extraction.Acceleration(df_segment_inner)
           df.at[(ActionDown_DF[count]), 'Acceleration'] = 0
           df.at[(ActionDown_DF[count]+1), 'Acceleration'] = 0
           df.at[ActionDown_DF[count] + innercount + 1, 'Acceleration'] = Acceleration
           df_segment.at[ActionDown_DF[count] + innercount + 1, 'Acceleration'] = round(Acceleration, 3)

           # Calculating Euclidean Distance between each points
           Euc_Between_Points = Feature_Extraction.Inking_Distance(df_segment_inner)
           df.at[(ActionDown_DF[count]), 'Euc_Between_Points'] = 0
           df.at[ActionDown_DF[count] + innercount+1, 'Euc_Between_Points'] = Euc_Between_Points

           innercount = innercount + 1

       #Normalised X and Y

       X = df[' X ']
       Y = df[' Y ']

       # Normalize time series data
       values = X.values.reshape((len(X), 1))
       sample2 = Y.values.reshape((len(Y), 1))
       # train the normalization
       scaler = MinMaxScaler(feature_range=(0, 1))
       scaler2 = scaler.fit(sample2)

       # normalize the dataset and print the first 5 rows
       normalized_X = scaler.transform(values)
       normalized_Y = scaler.transform(sample2)

       inversed_X = scaler.inverse_transform(normalized_X)
       inversed_Y = scaler.inverse_transform(normalized_Y)

       df['Norm_X'] = normalized_X
       df['Norm_Y'] = normalized_Y

       #Calculating from the point to point features
       df.at[ActionDown_DF[count], 'Total_Stroke_Time'] = Total_Stroke_Time
       Min_Slope = df['Slope'].min()
       Max_Slope = df['Slope'].max()
       Average_Velocity=df['Velocity'].mean()
       Peak_Velocity_Value = df_segment['Velocity'].max()
       Average_Acceleration=df['Acceleration'].mean()
       Peak_Acceleration_value=df['Acceleration'].max()

       #Peak_Acceleration_position
      # Peak_Acceleration_Value_Position_df = df_segment[df_segment['Acceleration'] == Peak_Velocity_Value]
      # Peak_Acceleration_position = Peak_Acceleration_Value_Position_df.iat[0, 12]


       Average_Delta_X = df['Delta_X'].mean()
       Average_Delta_Y = df['Delta_Y'].mean()


       #Finding Peak Value position
      # Peak_Value_Position_df =  df_segment[df_segment['Velocity'] == Peak_Velocity_Value]
      # Peak_Velocity_Position =  Peak_Value_Position_df.iat[0,11]

       #Mid-stroke features
       mid_location = round(((len(df_segment))/2),0)

       #First-half stroke
       df_firsthalf_stoke = df_segment.iloc[0:int(mid_location)]
       mean_of_velocity_firsthalf_stroke= df_firsthalf_stoke.loc[:, 'Velocity'].mean()

       #SecondHalf Stroke
       df_secondhalf_stoke = df_segment.iloc[int(mid_location):-1]
       mean_of_velocity_secondhalf_stroke = df_secondhalf_stoke.loc[:, 'Velocity'].mean()

       #standard Deviation of a Column
       std= df_segment.loc[:, "Velocity"].std()
       print('######################')
       print('Standard Deviation: ', std)

       #Inking Distance
       Inking_Distance=df['Euc_Between_Points'].sum()

       #Writing onto the output file
       df.at[ActionDown_DF[count], 'Peak_Velocity_Value'] = Peak_Velocity_Value
     #  df.at[ActionDown_DF[count], 'Peak_Velocity_Position'] = Peak_Velocity_Position
       df.at[ActionDown_DF[count], 'Mid-Location'] = mid_location
       df.at[ActionDown_DF[count], 'Mean_of_velocity_firsthalf_stroke'] = mean_of_velocity_firsthalf_stroke
       df.at[ActionDown_DF[count], 'Mean_of_velocity_secondhalf_stroke'] = mean_of_velocity_secondhalf_stroke
       df.at[ActionDown_DF[count], 'Standard-Deviation'] = std
       df.at[ActionDown_DF[count], 'Average_Acceleration'] = Average_Acceleration
       df.at[ActionDown_DF[count],'Inking_Distance'] = Inking_Distance
       df.at[ActionDown_DF[count], 'Width'] = Stroke_Width
       df.at[ActionDown_DF[count], 'Height'] = Stroke_Height
       df.at[ActionDown_DF[count],'Min_Slope']= Min_Slope
       df.at[ActionDown_DF[count],'Max Slope']= Max_Slope
       df.at[ActionDown_DF[count],'Start_X'] = Start_X
       df.at[ActionDown_DF[count],'End_X'] = End_X
       df.at[ActionDown_DF[count], 'Start_Y'] = Start_Y
       df.at[ActionDown_DF[count], 'End_Y'] = End_Y
       df.at[ActionDown_DF[count], 'Average_Delta_X'] = Average_Delta_X
       df.at[ActionDown_DF[count], 'Average_Delta_Y'] = Average_Delta_Y
       df.at[ActionDown_DF[count], 'Finger_Pressure_FingerDown'] = Finger_Pressure_Down
       df.at[ActionDown_DF[count], 'Finger_Pressure_FingerUp'] = Finger_Pressure_Up
       df.at[ActionDown_DF[count], 'Average_Finger_Pressure'] = Average_Finger_Pressure
       df.at[ActionDown_DF[count], 'Mid_Action_Pressure'] = Mid_Action_Pressure
       df.at[ActionDown_DF[count], 'Finger_Size_FingerDown'] = Finger_Size_Down
       df.at[ActionDown_DF[count], 'Finger_Size_FingerUp'] = Finger_Size_Up
       df.at[ActionDown_DF[count], 'Average_Finger_Size'] = Average_Finger_Size
       df.at[ActionDown_DF[count], 'Stroke_Area_Outer'] = Stroke_Area_Outer
       df.at[ActionDown_DF[count], 'Average_Velocity'] = Average_Velocity
       df.at[ActionDown_DF[count], 'Attack_Angle'] = attackangle
       df.at[ActionDown_DF[count], 'Leaving_Angle'] = leavingangle
       df.at[ActionDown_DF[count], 'Number_of_Datapoints'] = Number_of_data_points

    count = count + 1
       #    df_DTW = df[['Page', ' Touch_Action ',  ' X ', ' Y ', 'Norm_X', 'Norm_Y','Delta_X','Delta_Y','Velocity','Acceleration',' Finger Size ']]
       #Writing to the file

df.to_csv("C:\\Users\\ee244\\Desktop\\Data Collection\\Data\\user106\\session 2\\features\\Vertical_Features_S1.csv", index=False)
      # df_DTW.to_csv("C:\\Users\\ee244\\Desktop\\Data Collection\\Data\\user128\\session 1\\features\\Features_DTW.csv", index=False)








